import pytest

from string_Utils import StringUtils

string_Utils = StringUtils()

def test_capitilize():

# –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã

   assert string_Utils.capitilize('skypro') == 'Skypro'                 # –° –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã

   assert string_Utils.capitilize('   skypro'.strip()) == 'Skypro'      # –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ

   assert string_Utils.capitilize('skypro   '.strip()) == 'Skypro'      # –ü—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ

   assert string_Utils.capitilize('') == ''     # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

   assert string_Utils.capitilize(' ') == ' '     # —Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–±–µ–ª–æ–º 


# –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã

   assert string_Utils.capitilize('') == ''    # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

   assert string_Utils.capitilize(' ') == ' '  # –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–±–µ–ª–æ–º

   assert string_Utils.capitilize('0') == '0'  # –°—Ç—Ä–æ–∫–∞ —Å –Ω—É–ª–µ–º

   assert string_Utils.capitilize('üòÅ') == 'üòÅ'  # –°—Ç—Ä–æ–∫–∞ —Å–æ —Å–º–∞–π–ª–∏–∫–æ–º


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ trim

def test_trim():

 # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã

   assert string_Utils.trim('   skypro') == 'skypro'  # –ü—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ

   assert string_Utils.trim('skypro') == 'skypro'     # –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤

   assert string_Utils.trim('sky pro') == 'sky pro'   # –° –ø—Ä–æ–±–µ–ª–æ–º –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ

   assert string_Utils.trim('skypro ') == 'skypro '   # C –ø—Ä–æ–±–µ–ª–æ–º –≤ –∫–æ–Ω—Ü–µ


# –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã

   assert string_Utils.trim('  ') == ''                     # –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã

   assert string_Utils.trim('$%^&*"%^') == '$%^&*"%^'       # –¢–æ–ª—å–∫–æ —Å–ø–µ—Ü—Å–∏–º–æ–≤–æ–ª—ã

   assert string_Utils.trim('') == ''                       # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

   assert string_Utils.trim('üòÅüòÅüòÅ') == 'üòÅüòÅüòÅ'        # –¢–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ to_list

def test_to_list():
    
# –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã

   assert string_Utils.to_list('a,b,c') == ['a', 'b', 'c']            # –ó–∞–ø—è—Ç–∞—è

   assert string_Utils.to_list('1:2:3', ':') == ['1', '2', '3']       # –î–≤–æ–µ—Ç–æ—á–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

   assert string_Utils.to_list('1;2;3', ';') == ['1', '2', '3']       # —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

   assert string_Utils.to_list('1/2/3', '/') == ['1', '2', '3']       # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "/"

   assert string_Utils.to_list('–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤—Ç–æ—Ä–Ω–∏–∫ —Å—Ä–µ–¥–∞ —á–µ—Ç–≤–µ—Ä–≥ –ø—è—Ç–Ω–∏—Ü–∞ —Å—É–±–±–æ—Ç–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ', ' ') == ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ'] 
                                                                       # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø—Ä–æ–±–µ–ª

# –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã

   assert string_Utils.to_list('1üòÅ2üòÅ3', 'üòÅ') == ['1', '2', '3']    # –≠–º–æ–¥–∑–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

   assert string_Utils.to_list('1-2-3', '-') == ['1', '2', '3']         # –¢–∏—Ä–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

   assert string_Utils.to_list('1_2_3', '_') == ['1', '2', '3']         # –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ

   assert string_Utils.to_list('1%2%3', '%') == ['1', '2', '3']         # —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å



# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ contains

def test_contains():
     
# –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã

   assert string_Utils.contains('SkyPro', 'S') is True  # –°–∏–º–≤–æ–ª –Ω–∞–π–¥–µ–Ω

   assert string_Utils.contains('abc', 'abc') is True  # –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ


# –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
   assert string_Utils.contains('SkyPro', 'U') is False               # –°–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω

   assert string_Utils.contains('', 'a') is False                     # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

   assert string_Utils.contains('', '') is True                       # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

   assert string_Utils.contains('abc', '') is True                    # –ü—É—Å—Ç–∞—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∞

   assert string_Utils.contains('SkyüòÅPro', 'üòÅ') is True            # –≠–º–æ–¥–∑–∏



# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ delete_symbol

def test_delete_symbol():

# –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã

   assert string_Utils.delete_symbol('SkyPro', 'k') == 'SyPro'         # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞

   assert string_Utils.delete_symbol('abc123', '123') == 'abc'         # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤

   assert string_Utils.delete_symbol('SkyüòÅPro', 'üòÅ') == 'SkyPro'    # –£–¥–∞–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏

# –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã

   assert string_Utils.delete_symbol('', 'a') == ''                     # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

   assert string_Utils.delete_symbol('SkyPro', 'X') == 'SkyPro'         # –°–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω



# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ starts_with

def test_starts_with():

# –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã

   assert string_Utils.starts_with('SkyPro', 'S') is True               # –°–∏–º–≤–æ–ª –≤ –Ω–∞—á–∞–ª–µ

   assert string_Utils.starts_with('abc', 'a') is True                  # –°–∏–º–≤–æ–ª –≤ –Ω–∞—á–∞–ª–µ

   assert string_Utils.starts_with('üòÅabc', 'üòÅ') is True              # –≠–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ

# –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã

   assert string_Utils.starts_with('SkyPro', 'U') is False              # –°–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω

   assert string_Utils.starts_with('', 'a') is False                    # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

   assert string_Utils.starts_with('abc', 'X') is False                 # –°–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω



# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ end_with

def test_end_with():

# –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã

   assert string_Utils.end_with('SkyPro', 'o') is True                   # –û–∫–æ–Ω—á–∞–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç

   assert string_Utils.end_with('abc', 'c') is True                      # –û–∫–æ–Ω—á–∞–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç

   assert string_Utils.end_with('abcüòÅ', 'üòÅ') is True                  # –û–∫–æ–Ω—á–∞–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç

# –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã

   assert string_Utils.end_with('SkyPro', 'U') is False                   # –û–∫–æ–Ω—á–∞–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç

   assert string_Utils.end_with('', 'a') is False                         # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

   assert string_Utils.end_with('abc', 'C') is False                      # –û–∫–æ–Ω—á–∞–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä



# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ list_to_string

def test_list_to_string():

# –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã

   assert string_Utils.list_to_string(['a', 'b', 'c'], ',') == 'a,b,c'  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∑–∞–ø—è—Ç–∞—è 

   assert string_Utils.list_to_string(['a', 'b', 'c'], ':') == 'a:b:c'  # –î–≤–æ–µ—Ç–æ—á–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
   
   assert string_Utils.list_to_string(['4 –Ω–æ—è–±—Ä—è 2024'], ' ') == '4 –Ω–æ—è–±—Ä—è 2024'  # –ø—Ä–æ–±–µ–ª —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

# –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã

   assert string_Utils.list_to_string(['a', '', 'b', 'c'], ',') == 'a,,b,c'               # –ü—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã

   assert string_Utils.list_to_string([]) == ''                                           # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫

   assert string_Utils.list_to_string(['a', 'b', 'c'], '') == 'abc'                       # –ë–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è